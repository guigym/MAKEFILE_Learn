
% 的意思是表示一个或多个任意字符

$@ : 表示规则中的目标文件集。在模式规则中，如果有多个目标，那么， $@ 就是匹配于 目标中模式定义的集合。

$< : 依赖目标中的第一个目标名字。如果依赖目标是以模式（即 % ）定义的，那么 $< 将是符合模式的一系列的文件集。注意，其是一个一个取出来的。

$% : 仅当目标是函数库文件中，表示规则中的目标成员名。例如，如果一个目标是 foo.a(bar.o) ， 那么， $% 就是 bar.o ， $@ 就是 foo.a 。如果目标不是函数库文件 （Unix下是 .a ，Windows下是 .lib ），那么，其值为空。

$? : 所有比目标新的依赖目标的集合。以空格分隔。

$^ : 所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重 复的，那个这个变量会去除 重复的依赖目标，只保留一份。

$+ : 这个变量很像 $^ ，也是所有依赖目标的集合。只是它不去除重复的依赖目标

$* : 这个变量表示目标模式中 % 及其之前的部分。如果目标是 dir/a.foo.b ，并且 目标的模式是 a.%.b ，那么， $* 的值就是 dir/a.foo

wildcard ： %在变量定义和函数引用时无效，比如$SRC=$(wildcard *.c)不能写作$SRC=%.c 

notdir : 去除路径

patsubst :替换通配符

 

-c 只编译并生成目标文件。 

-g 生成调试信息。GNU 调试器可利用该信息。 

-O0 不进行优化处理。

-O 或 -O1 优化生成代码。

-O2 进一步优化。

-O3 比 -O2 更进一步优化，包括 inline 函数。 

:-M 自动寻找依赖关系,（GNU gcc/g++ 需要使用-MM, 否者会把标准库文件加进来）

@ 字符在命令行前,这个命令不会被显示出来， 但是仍然会执行；

-n(--just-print) 只显示命令,不执行命令,可以用来查看命令执行的样子与顺序， 用来DEBUG

-s(--silent/--quiet) 全面禁止命令执行中的输出；

; 来分割同一行多个命令,后面命令都是基于前面命令

- 在命令前面，不管命令出不出错，都认为成功

-i(--ignore-errors),Makefile 中所有命令都忽略错误

-k(--keep-going),某个规则出错，忽略该规则，继续执行其他规则

CFLAGS 环境变量,定义以后就会使用该环境变量,
